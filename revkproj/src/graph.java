
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;
import javax.swing.JLabel;
import javax.swing.JTextArea;

//import javax.media.opengl.GL gl;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lenovo
 */
public class graph extends javax.swing.JFrame
{

    //Color cc;
    /**
     * Creates new form graph
     */
    //int f_value=0;
    int stepv=0,grid;
    Color colour;
    int no;
    int[] values;
    public graph() {
        initComponents();
        this.getContentPane().setBackground(Color.BLACK);
    }
    public graph(int step1,int[] arr,int gri,Color col,int n1)
    {
        //arr=new int[5];
        initComponents();
        this.getContentPane().setBackground(Color.BLACK);
        stepv=step1; 
        grid=gri;
        no=n1;
        colour=col;
        values=new int[no];
        for(int i=0;i<no;i++)
        {
            values[i]= arr[i];
            System.out.println(values[i]);
            System.out.println(arr[i]);
        }
     
        // line l=new line(jDesktopPane1,stepv,speed,grid,colour);
        //l.start();
    }
   /* public graph(Color c1)
    {
        cc=c1;
    }*/

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDesktopPane1 = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1360, 747));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("CLICK");

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("YOU CHOSE THE FOLLOWING X-VALUES:");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("THE CORRESPONDING Y-VALUES ACCORDING TO FUNCTION Y=X+1:");

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)))
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(164, 164, 164))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 40, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 21, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(312, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        jTextArea1.setText(" ");
        jTextArea2.setText(" ");
        line l=new line(jDesktopPane1,stepv,values,grid,colour,no,jTextArea1,jTextArea2);
        l.start();
    }//GEN-LAST:event_formMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(graph.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new graph().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
class line extends Thread
{
 int[] coord;
 int i,k,x,a1,b1,a,b,y,x1,y1,jy,fvalue,conty,contx,vstep,speed,grid,no;
 float py1,poy1,y2,pox=3,poy,px=6,py;
 Color colo;
 Graphics g;
 Graphics2D g1;
 JTextArea jll,j22;
//GraphicsGL gg;
 JDesktopPane j;
 line(JDesktopPane j1,int stepv,int[] values,int gri,Color col,int num,JTextArea jt1,JTextArea jt2)
 {
//values=new int[5];
grid=gri;
jll=jt1;
no=num;
j22=jt2;
coord=new int[no];
g=j1.getGraphics();
g1=(Graphics2D)g;
j=j1;
//fvalue=f_value;
vstep=stepv;
colo=col;
for(int i=0;i<no;i++)
        {
            coord[i]= values[i];
            System.out.println(coord[i]);
            System.out.println(values[i]);
        }
//coord=Arrays.copyOf(values, values.length);

//cc=c1;
 }
 public void run()
 {
     
     j.setBackground(colo);
      x=j.getWidth()/grid;          
      y=j.getHeight()/grid;
      g.setColor(Color.BLACK);   //colour of first vertical line
      g1.setStroke(new BasicStroke(25));      //thickness
      for(i=0;i<=grid;i++)             //start drawing vertical lines
      {
       x1=x*i;
       g.drawLine(x1,0,x1,y*grid);
       g1.setStroke(new BasicStroke(1));
       g.setColor(Color.BLACK);
      }
     /*g.setColor(Color.YELLOW);
      g.drawLine(x*0, i, i, i);*/
      g.setColor(Color.BLACK);   //colour of first horizontal line
      g1.setStroke(new BasicStroke(25));    
     for(jy=grid;jy>=0;jy--)
     {
         y1=y*jy;
         g.drawLine(0,y1,x*grid,y1);
         g1.setStroke(new BasicStroke(1));
         g.setColor(Color.BLACK);
         
     }       //end drawing grid
     g.setColor(Color.WHITE);
     g.drawString("0",0*x,10*y);
     for(i=grid,k=0;i>=1;i--) //y axis- values display
     {
         contx=0;
         g.drawString(""+k,contx*x,i*y);
         k=k+vstep;
     }
     for(i=0,k=0;i<=grid;i++) //x axis- values display 
     {
         conty=grid;
         g.drawString(""+k,i*x,conty*y);
         k=k+vstep;
     }
     for(i=0;i<coord.length;i++)
     {
         jll.append(""+coord[i]+"\n");
     }
     for(k=0;k<=coord.length-2;k++)
     {
         try {
             px=coord[k];
             pox=coord[k+1];
             py1=px+1;   //function
             poy1=pox+1; //function
             py=10-(py1);
             poy=10-(poy1);
             j22.append(""+py1+"\n");
             a=(int)px;
             b=(int)(10-py);
             a1=(int)pox;
             b1=(int)(10-poy);
            /*px=x*px;    //change wrt width and height of grid
             py=y*py;
             pox=x*pox;
             poy=y*poy;
           */     
             px=(px/vstep)*x;   //adjust to displayed scale
             pox=(pox/vstep)*x;
             py=(grid-(py1/vstep))*y;
             poy=(grid-(poy1/vstep))*y; 
             
             g.setColor(Color.BLACK);
             Point2D.Float point1 = new Point2D.Float(px, py);
             //point1.setLocation(point1);
             Ellipse2D.Float ell= new Ellipse2D.Float(px,py,4,4);  
             g1.fill(ell);
             // g.fillOval(px,py,6,6);
             g.setColor(Color.BLACK);
             Point2D.Float point2 = new Point2D.Float(pox,poy);
             Ellipse2D.Float ell1= new Ellipse2D.Float(pox,poy,4,4);  
             g1.fill(ell1);
             //point2.setLocation(point2);
             //g1.fillOval(pox,poy,6,6);
             //g.fillOval(pox,poy,6,6);
             g.setColor(Color.RED);
             g1.setStroke(new BasicStroke(3));
            Line2D.Float line=new Line2D.Float(px,py,pox,poy);
             g1.draw(line);
             g1.setStroke(new BasicStroke(3));
             //g.drawLine(px,py,pox,poy);
             g.setColor(Color.BLACK);
             
             //g.drawString("("+a+","+b+")",px,py);     
             g1.drawString("("+a+","+b+")",px,py);
             g1.drawString("("+a1+","+b1+")",pox,poy);
             
             Thread.sleep(2000);
         } catch (InterruptedException ex) {
             Logger.getLogger(line.class.getName()).log(Level.SEVERE, null, ex);
         }
     }
     j22.append(""+poy1+"\n");
     /*g.setColor(Color.WHITE);
     g.drawString("0",0*x,10*y);
     for(i=grid,k=0;i>=1;i--) //y axis- values display
     {
         contx=0;
         g.drawString(""+k,contx*x,i*y);
         k=k+vstep;
     }
     for(i=0,k=0;i<=grid;i++) //x axis- values display 
     {
         conty=grid;
         g.drawString(""+k,i*x,conty*y);
         k=k+vstep;
     }*/
 }
 }